import asyncio
import time
import logging
import os
from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Updater
from playwright.async_api import async_playwright

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN", "8155341478:AAFIG7hFNPewG_euxMO0kzAXq1Sq25YiMqY")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Render)
app = Flask(__name__)

# ================== Playwright-–ø–∞—Ä—Å–µ—Ä—ã ==================

async def fetch_apr(url, script):
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-setuid-sandbox']  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Render
            )
            context = await browser.new_context()
            page = await context.new_page()
            await page.goto(url, timeout=60000)
            await page.wait_for_timeout(10000)
            result = await page.evaluate(script)
            await browser.close()
            return result or "APY –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

async def get_usda_apr():
    return await fetch_apr("https://usda.avalonfinance.xyz/swap/",
        """() => [...document.querySelectorAll('*')].map(e => e.textContent.trim()).find(t => /^\d+(\.\d+)?%$/.test(t))""")

async def get_susdf_apr():
    return await fetch_apr("https://app.falcon.finance/overview",
        """() => [...document.querySelectorAll('*')].map(e => e.textContent.trim()).find(t => /^\d+(\.\d+)?%$/.test(t))""")

async def get_usde_apr():
    return await fetch_apr("https://app.ethena.fi/earn",
        """() => [...document.querySelectorAll('*')].map(e => e.textContent.trim()).find(t => /^\d+(\.\d+)?%$/.test(t))""")

async def get_slvl_apr():
    return await fetch_apr("https://app.level.money/",
        """() => {
            const blocks = Array.from(document.querySelectorAll('div.flex')).filter(el =>
                el.textContent.includes('APY') && el.textContent.includes('%'));
            for (const block of blocks) {
                const match = block.textContent.match(/\d+(\.\d+)?%/);
                if (match) return match[0];
            }
            return null;
        }""")

async def get_syrup_apr():
    return await fetch_apr("https://syrup.fi/",
        """() => {
            const apyLabel = Array.from(document.querySelectorAll("span")).find(el => el.textContent.trim() === "APY");
            if (!apyLabel) return null;
            const container = apyLabel.closest('div.MuiStack-root');
            if (!container) return null;
            const percentEl = container.querySelector('h4');
            const percent = percentEl ? percentEl.textContent.trim() : null;
            const hasPercent = container.innerText.includes('%');
            return percent && hasPercent ? percent + "%" : null;
        }""")

async def get_scrvusd_apr():
    return await fetch_apr("https://curve.fi/crvusd/ethereum/scrvUSD/",
        """() => {
            const apyEl = Array.from(document.querySelectorAll('p')).find(el => el.textContent.includes('Estimated APY'));
            if (!apyEl) return null;
            const container = apyEl.closest('div.MuiStack-root');
            if (!container) return null;
            const value = container.querySelector('p.MuiTypography-highlightL');
            const percent = container.querySelector('p.MuiTypography-highlightS');
            return value && percent ? value.textContent.trim() + percent.textContent.trim() : null;
        }""")

async def get_sfrxusd_apr(page):
    try:
        await page.goto("https://app.frax.finance/sfrax/stake", timeout=60000)
        await page.wait_for_timeout(8000)
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º "Est. current APY"
        label = await page.query_selector("text=Est. current APY")
        if not label:
            return "APY –Ω–µ –Ω–∞–π–¥–µ–Ω"
        container = await label.evaluate_handle("el => el.closest('div.frax-Col-root')")
        apy_div = await container.query_selector("div.frax-1tf5fhe")
        return await apy_div.inner_text() if apy_div else "APY –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

async def get_stkgho_apr():
    return await fetch_apr("https://app.aave.com/staking/",
        """() => {
            const label = Array.from(document.querySelectorAll('p')).find(p =>
                p.textContent.trim() === 'Staking APR');
            if (!label) return null;
            const box = label.closest('div')?.parentElement;
            const percentEl = box?.querySelector('p.MuiTypography-root.MuiTypography-secondary14');
            return percentEl && percentEl.textContent.includes('%') ? percentEl.textContent.trim() : null;
        }""")

async def get_stusr_apr():
    return await fetch_apr("https://resolv.xyz/",
        """() => {
            const label = Array.from(document.querySelectorAll('p')).find(el => el.textContent.toLowerCase().includes('usr 7d apy'));
            if (!label) return null;
            const container = label.closest('div');
            const value = container?.nextElementSibling?.querySelector('p.framer-text');
            return value ? value.textContent.trim() + '%' : null;
        }""")

async def get_usdy_apr():
    return await fetch_apr("https://ondo.finance/",
        """() => {
            const apyText = Array.from(document.querySelectorAll('p')).find(p =>
                p.textContent.trim().endsWith('%') && p.textContent.includes('.') && p.textContent.length < 10);
            return apyText ? apyText.textContent.trim() : null;
        }""")

async def get_scusd_apr():
    return await fetch_apr("https://app.rings.money/#/stake",
        """() => {
            const pTags = Array.from(document.querySelectorAll('p')).filter(p =>
                p.textContent.trim().startsWith('~') && p.textContent.includes('%'));
            return pTags.length > 0 ? pTags[0].textContent.trim() : null;
        }""")

# ================== –ö–æ–º–∞–Ω–¥—ã Telegram ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="""
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è APY –ø–æ —Å—Ç–µ–π–±–ª–∫–æ–π–Ω–∞–º.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/usda ‚Äî APY USDA
/susdf ‚Äî APY sUSDf
/usde ‚Äî APY USDe
/slvl ‚Äî APY slvlUSD
/syrup ‚Äî APY syrupUSD
/scrvusd ‚Äî APY scrvUSD
/stkgho ‚Äî APY stkGHO
/stusr ‚Äî APY stUSR
/usdy ‚Äî APY USDY
/scusd ‚Äî APY scUSD
/sfrxusd ‚Äî APY sfrxUSD
/all ‚Äî –í—Å–µ APY —Å—Ä–∞–∑—É
""")

async def send_apr(update: Update, context: ContextTypes.DEFAULT_TYPE, fetch_fn, name):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü–æ–ª—É—á–∞—é APY –¥–ª—è {name}...")
    result = await fetch_fn()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"APY –¥–ª—è {name}: {result}")

# –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
async def usda(update, context): await send_apr(update, context, get_usda_apr, "USDA")
async def susdf(update, context): await send_apr(update, context, get_susdf_apr, "sUSDf")
async def usde(update, context): await send_apr(update, context, get_usde_apr, "USDe")
async def slvl(update, context): await send_apr(update, context, get_slvl_apr, "slvlUSD")
async def syrup(update, context): await send_apr(update, context, get_syrup_apr, "syrupUSD")
async def scrvusd(update, context): await send_apr(update, context, get_scrvusd_apr, "scrvUSD")
async def stkgho(update, context): await send_apr(update, context, get_stkgho_apr, "stkGHO")
async def stusr(update, context): await send_apr(update, context, get_stusr_apr, "stUSR")
async def usdy(update, context): await send_apr(update, context, get_usdy_apr, "USDY")
async def scusd(update, context): await send_apr(update, context, get_scusd_apr, "scUSD")
async def sfrxusd(update, context): await send_apr(update, context, get_sfrxusd_apr, "sfrxUSD")

async def all_apr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üîÑ –ü–æ–ª—É—á–∞—é –≤—Å–µ APY...")
    start_time = time.time()

    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=True,
            args=['--no-sandbox', '--disable-setuid-sandbox']  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Render
        )
        context_browser = await browser.new_context()
        page = await context_browser.new_page()

        results = await asyncio.gather(
            get_usda_apr(), get_susdf_apr(), get_usde_apr(), get_slvl_apr(), get_syrup_apr(),
            get_scrvusd_apr(), get_stkgho_apr(), get_stusr_apr(), get_usdy_apr(), get_scusd_apr(),
            get_sfrxusd_apr(page)  # ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º page
        )

        await browser.close()

    elapsed = round(time.time() - start_time, 2)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"""üìä –í—Å–µ APY:
USDA: {results[0]}
sUSDf: {results[1]}
USDe: {results[2]}
slvlUSD: {results[3]}
syrupUSD: {results[4]}
scrvUSD: {results[5]}
stkGHO: {results[6]}
stUSR: {results[7]}
USDY: {results[8]}
scUSD: {results[9]}
sfrxUSD: {results[10]}
‚è± –í—Ä–µ–º—è: {elapsed} —Å–µ–∫""")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ, –¥–æ –∑–∞–ø—É—Å–∫–∞ Flask
bot = ApplicationBuilder().token(BOT_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
bot.add_handler(CommandHandler("start", start))
bot.add_handler(CommandHandler("usda", usda))
bot.add_handler(CommandHandler("susdf", susdf))
bot.add_handler(CommandHandler("usde", usde))
bot.add_handler(CommandHandler("slvl", slvl))
bot.add_handler(CommandHandler("syrup", syrup))
bot.add_handler(CommandHandler("scrvusd", scrvusd))
bot.add_handler(CommandHandler("stkgho", stkgho))
bot.add_handler(CommandHandler("stusr", stusr))
bot.add_handler(CommandHandler("usdy", usdy))
bot.add_handler(CommandHandler("scusd", scusd))
bot.add_handler(CommandHandler("sfrxusd", sfrxusd))
bot.add_handler(CommandHandler("all", all_apr))

# ================== –í–µ–±-—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è Render ==================

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/')
def index():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º."

# –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/test')
def test():
    return f"–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–æ–∫–µ–Ω: {BOT_TOKEN[:5]}... –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {bot is not None}"

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
@app.route('/set_webhook')
def set_webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞")
    render_url = os.environ.get('RENDER_EXTERNAL_URL', 'https://telegram-bot-nhov.onrender.com')
    
    webhook_url = f"{render_url}/webhook"
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ URL: {webhook_url}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        bot.bot.set_webhook(webhook_url)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")
        return f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        update_json = request.get_json()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {update_json}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(update_json, bot.bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.run(bot.process_update(update))
        return "OK"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞: {e}", 500

# ================== –ó–∞–ø—É—Å–∫ ==================

if __name__ == "__main__":
    if os.environ.get('RENDER'):
        # –ù–∞ Render –∑–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Render")
        port = int(os.environ.get("PORT", 5000))
        app.run(host="0.0.0.0", port=port)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)")
        bot.run_polling()